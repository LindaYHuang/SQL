SQL Schema
Table: Orders
#+BEGIN_EXAMPLE
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| order_id      | int     |
| customer_id   | int     |
| order_date    | date    | 
| item_id       | varchar |
| quantity      | int     |
+---------------+---------+
(ordered_id, item_id) is the primary key for this table.
This table contains information of the orders placed.
order_date is the date when item_id was ordered by the customer with id customer_id.
#+END_EXAMPLE

Table: Items
#+BEGIN_EXAMPLE
+---------------------+---------+
| Column Name         | Type    |
+---------------------+---------+
| item_id             | varchar |
| item_name           | varchar |
| item_category       | varchar |
+---------------------+---------+
item_id is the primary key for this table.
item_name is the name of the item.
item_category is the category of the item.
#+END_EXAMPLE

You are the business owner and would like to obtain a sales report for category items and day of the week.
Write an SQL query to report how many units in each category have been ordered on each day of the week.
Return the result table ordered by category.
The query result format is in the following example:

 
#+BEGIN_EXAMPLE
Orders table:
+------------+--------------+-------------+--------------+-------------+
| order_id   | customer_id  | order_date  | item_id      | quantity    |
+------------+--------------+-------------+--------------+-------------+
| 1          | 1            | 2020-06-01  | 1            | 10          |
| 2          | 1            | 2020-06-08  | 2            | 10          |
| 3          | 2            | 2020-06-02  | 1            | 5           |
| 4          | 3            | 2020-06-03  | 3            | 5           |
| 5          | 4            | 2020-06-04  | 4            | 1           |
| 6          | 4            | 2020-06-05  | 5            | 5           |
| 7          | 5            | 2020-06-05  | 1            | 10          |
| 8          | 5            | 2020-06-14  | 4            | 5           |
| 9          | 5            | 2020-06-21  | 3            | 5           |
+------------+--------------+-------------+--------------+-------------+

Items table:
+------------+----------------+---------------+
| item_id    | item_name      | item_category |
+------------+----------------+---------------+
| 1          | LC Alg. Book   | Book          |
| 2          | LC DB. Book    | Book          |
| 3          | LC SmarthPhone | Phone         |
| 4          | LC Phone 2020  | Phone         |
| 5          | LC SmartGlass  | Glasses       |
| 6          | LC T-Shirt XL  | T-Shirt       |
+------------+----------------+---------------+

Result table:
+------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Category   | Monday    | Tuesday   | Wednesday | Thursday  | Friday    | Saturday  | Sunday    |
+------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
| Book       | 20        | 5         | 0         | 0         | 10        | 0         | 0         |
| Glasses    | 0         | 0         | 0         | 0         | 5         | 0         | 0         |
| Phone      | 0         | 0         | 5         | 1         | 0         | 0         | 10        |
| T-Shirt    | 0         | 0         | 0         | 0         | 0         | 0         | 0         |
+------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
On Monday (2020-06-01, 2020-06-08) were sold a total of 20 units (10 + 10) in the category Book (ids: 1, 2).
On Tuesday (2020-06-02) were sold a total of 5 units  in the category Book (ids: 1, 2).
On Wednesday (2020-06-03) were sold a total of 5 units in the category Phone (ids: 3, 4).
On Thursday (2020-06-04) were sold a total of 1 unit in the category Phone (ids: 3, 4).
On Friday (2020-06-05) were sold 10 units in the category Book (ids: 1, 2) and 5 units in Glasses (ids: 5).
On Saturday there are no items sold.
On Sunday (2020-06-14, 2020-06-21) were sold a total of 10 units (5 +5) in the category Phone (ids: 3, 4).
There are no sales of T-Shirt.
#+END_EXAMPLE


---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC sql
SELECT Category,
[1] AS Monday, [2] AS Tuesday, [3] AS Wednesday, [4] AS Thursday, [5] AS Friday,[6] AS Saturday,[7] AS Sunday
FROM (
    SELECT o.Order_date,o.quantity,DATEPART(WEEKDAY,o.order_date) AS wd,
    i.item_category AS Category
    FROM Items i LEFT JOIN Orders o ON o.item_id = i.item_id) AS SourceTable
PIVOT  
(  
    COLESCE(SUM(quantity),0)
    FOR wd IN ([1], [2], [3], [4], [5],[6],[7])  
) AS PivotTable
ORDER BY Category

###IF We don't need to transfer weekday from numbers to days, we can create a dynamically pivot data
--DECLARE THE DYNAMICALLY CREATED SQL script
DECLARE @SQLQUERY AS NVARCHAR(MAX)
--Declare the dynamical pivoted col values
DECLARE @PivotCol AS INT(MAX)

-- Generate the list of the weekdays that will become column headers
SELECT @PivotCol = COLESCE(@PivotCol + ',','') + wd
FROM (   SELECT DATEPART(WEEKDAY,o.order_date) AS wd,
         FROM Items i LEFT JOIN Orders o ON o.item_id = i.item_id) as a

--Create the dynamic query 
SET @SQLQUERY = N'SELECT o.Order_date,o.quantity,DATEPART(WEEKDAY,o.order_date) AS wd, i.item_category AS Category'
                  + @PivotCol +
                  'FROM Items i LEFT JOIN Orders o ON o.item_id = i.item_id) AS SourceTable
                   PIVOT  (  
                           COLESCE(SUM(quantity),0)
                           FOR wd IN ('+  @PivotCol  +')  
                  ) AS PivotTable
                  ORDER BY Category'
EXEC SP_EXCUTESQL @SQLQUERY


#+END_SRC
   
https://www.youtube.com/watch?v=xpOq1_Ll9zQ
