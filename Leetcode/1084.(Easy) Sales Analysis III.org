Table: Product
#+BEGIN_EXAMPLE
+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| product_id   | int     |
| product_name | varchar |
| unit_price   | int     |
+--------------+---------+
product_id is the primary key of this table.
#+END_EXAMPLE

Table: Sales
#+BEGIN_EXAMPLE
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| seller_id   | int     |
| product_id  | int     |
| buyer_id    | int     |
| sale_date   | date    |
| quantity    | int     |
| price       | int     |
+------ ------+---------+
This table has no primary key, it can have repeated rows.
product_id is a foreign key to Product table.
#+END_EXAMPLE
 
Write an SQL query that reports the products that were only sold in spring 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.

The query result format is in the following example:
#+BEGIN_EXAMPLE
Product table:
+------------+--------------+------------+
| product_id | product_name | unit_price |
+------------+--------------+------------+
| 1          | S8           | 1000       |
| 2          | G4           | 800        |
| 3          | iPhone       | 1400       |
+------------+--------------+------------+

Sales table:
+-----------+------------+----------+------------+----------+-------+
| seller_id | product_id | buyer_id | sale_date  | quantity | price |
+-----------+------------+----------+------------+----------+-------+
| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |
| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |
| 2         | 1          | 3        | 2019-06-02 | 1        | 800   |
| 3         | 3          | 3        | 2019-05-13 | 2        | 2800  |
+-----------+------------+----------+------------+----------+-------+
#+END_EXAMPLE
Result table:
#+BEGIN_EXAMPLE
+-------------+--------------+
| product_id  | product_name |
+-------------+--------------+
| 1           | S8           |
+-------------+--------------+
#+END_EXAMPLE
The product with id 1 was only sold in spring 2019 while the other two were sold after

---------------------------------------------------------------------

- Solution 1:
#+BEGIN_SRC sql
SELECT DISTINCT s.product_id, p.product_name
FROM sales s LEFT JOIN product p ON s.product_id = p.product_id
WHERE (s.sale_date >= '2019-01-01' AND s.sale_date <= '2019-03-31') A
LEFT JOIN
(   SELECT DISTINCT s.product_id
    FROM sales s
    WHERE (s.sale_date < '2019-01-01' or s.sale_date > '2019-03-31')
)as B 
    on (A.product_id = B.product_id)
where B.product_id is NULL

#+END_SRC

- Solution 2: IN ORACLE SQL
#+BEGIN_SRC sql
#The MINUS compares the results of two queries and returns distinct rows from the result set of the first #query that does not appear in the result set of the second query.
#https://www.mysqltutorial.org/mysql-minus/
SELECT DISTINCT s.product_id, p.product_name
FROM sales s LEFT JOIN product p ON s.product_id = p.product_id
WHERE (s.sale_date >= '2019-01-01' AND s.sale_date <= '2019-03-31') 
MINUS
(   SELECT DISTINCT s.product_id
    FROM sales s
    WHERE (s.sale_date < '2019-01-01' OR s.sale_date > '2019-03-31')
)
#+END_SRC


