Table Variables:
#+BEGIN_EXAMPLE
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| name          | varchar |
| value         | int     |
+---------------+---------+
name is the primary key for this table.
This table contains the stored variables and their values.
 #+END_EXAMPLE

Table Expressions:
#+BEGIN_EXAMPLE
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| left_operand  | varchar |
| operator      | enum    |
| right_operand | varchar |
+---------------+---------+
(left_operand, operator, right_operand) is the primary key for this table.
This table contains a boolean expression that should be evaluated.
operator is an enum that takes one of the values ('<', '>', '=')
The values of left_operand and right_operand are guaranteed to be in the Variables table.
#+END_EXAMPLE 

Write an SQL query to evaluate the boolean expressions in Expressions table.

Return the result table in any order.

The query result format is in the following example.
#+BEGIN_EXAMPLE
Variables table:
+------+-------+
| name | value |
+------+-------+
| x    | 66    |
| y    | 77    |
+------+-------+

Expressions table:
+--------------+----------+---------------+
| left_operand | operator | right_operand |
+--------------+----------+---------------+
| x            | >        | y             |
| x            | <        | y             |
| x            | =        | y             |
| y            | >        | x             |
| y            | <        | x             |
| x            | =        | x             |
+--------------+----------+---------------+

Result table:
+--------------+----------+---------------+-------+
| left_operand | operator | right_operand | value |
+--------------+----------+---------------+-------+
| x            | >        | y             | false |
| x            | <        | y             | true  |
| x            | =        | y             | false |
| y            | >        | x             | true  |
| y            | <        | x             | false |
| x            | =        | x             | true  |
+--------------+----------+---------------+-------+
As shown, you need find the value of each boolean exprssion in the table using the variables table.
#+END_EXAMPLE


---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC sql
SELECT t.left_operand,t.operator,t.right_operand,
(Case 
    WHEN t.l_value > R_value AND t.operator = '>' then "true"
    WHEN t.l_value = R_value AND t.operator = '=' then "true"
    WHEN t.l_value < R_value AND t.operator = '<' then "true"
    else "false"
END) as value
From (SELECT E.*, V1.value as l_value, V2.value as R_value
      FROM Expressions E 
      INNER Join Variables V1 on E.left_operand = V1.name
      INNER Join Variables V2 on E.right_operand = V2.name)  t




#+END_SRC
